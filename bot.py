import logging
import os
import sqlite3
import openai
import re
from difflib import get_close_matches
from fuzzywuzzy import fuzz, process
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import io
import tempfile
import json
import requests
from google.oauth2 import service_account
from google.cloud import vision

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DB_FILE = "lab_data(2).db"
logging.basicConfig(
    format="%(asasctime)s - %(name)s - %(levelname)s - %(message)s",
    level=os.getenv("LOG_LEVEL", "INFO"),
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_TELEGRAM_ID = "5241327545"

openai.api_key = OPENAI_API_KEY
pending_requests = {}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫ –∏ –æ–ø–µ—á–∞—Ç–æ–∫
SYNONYMS = {
    r'\b—Ä—Ñ\b': '—Ä—Ñ-—Å—É–º–º–∞—Ä–Ω—ã–π',
    r'\b(ige?|–∏–≥–µ|ig[\s-]*e|–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω[\s-]*[–µe])\b': '–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω –µ',
    r'\b—Ä–µ–≤–º–æ—Ñ–∞–∫—Ç–æ—Ä\b': '—Ä—Ñ-—Å—É–º–º–∞—Ä–Ω—ã–π',
    r'\b–∞–ª—Ç\b': '–∞–ª–∞–Ω–∏–Ω–∞–º–∏–Ω–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞ (–∞–ª—Ç)',
    r'\b–∞—Å—Ç\b': '–∞—Å–ø–∞—Ä—Ç–∞—Ç–∞–º–∏–Ω–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞ (–∞—Å—Ç)'
}

def apply_synonyms(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω—ã—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤"""
    text = text.lower().strip()
    # –ó–∞–º–µ–Ω—è–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ e –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –µ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
    text = re.sub(r'(?i)immunoglobulin\s*e', '–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω –µ', text)
    text = re.sub(r'(?i)(ige|ig\s*e)', '–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω –µ', text)
    
    for pattern, replacement in SYNONYMS.items():
        text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
    return text

def connect_to_db():
    try:
        return sqlite3.connect(DB_FILE)
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return None

def get_all_analyses():
    conn = connect_to_db()
    if not conn:
        return []
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT name, price, timeframe FROM analyses")
        return [(normalize_text(name), price, timeframe) for name, price, timeframe in cursor.fetchall()]
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []
    finally:
        conn.close()

def normalize_text(text):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
    text = text.lower().strip()
    text = re.sub(r'[^\w\s-]', '', text)  # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\s+', ' ', text)      # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return text

def extract_matched_analyses(query, analyses):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–≤ —Å –Ω–µ—á–µ—Ç–∫–∏–º –ø–æ–∏—Å–∫–æ–º"""
    query = apply_synonyms(query)
    analysis_names = [name for name, _, _ in analyses]
    
    # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    exact_matches = set()
    for name in analysis_names:
        if re.search(r'\b' + re.escape(name) + r'\b', query, re.IGNORECASE):
            exact_matches.add(name)
    
    # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    token_matches = set()
    query_tokens = re.findall(r'\w+', query)
    for name in analysis_names:
        name_tokens = re.findall(r'\w+', name)
        if any(fuzz.partial_ratio(token, name_token) > 85 
               for token in query_tokens 
               for name_token in name_tokens):
            token_matches.add(name)
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_matches = exact_matches.union(token_matches)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
    if re.search(r'\b—Ä—Ñ\b', query, re.IGNORECASE):
        all_matches.add('—Ä—Ñ-—Å—É–º–º–∞—Ä–Ω—ã–π')
    if re.search(r'\b(ige?|–∏–≥–µ|–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω)\b', query, re.IGNORECASE):
        all_matches.add('–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω –µ')
    
    logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∞–Ω–∞–ª–∏–∑—ã: {all_matches}")
    return ', '.join(all_matches) if all_matches else ''

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user = update.message.from_user
        contact_info = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        if update.message.contact:
            phone = update.message.contact.phone_number
            contact_info = f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
            caption = update.message.caption or ""
            phone_match = re.search(r'(\+7|8)[\s-]?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}', caption)
            if phone_match:
                contact_info = f"–¢–µ–ª–µ—Ñ–æ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–∏: {phone_match.group()}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_info = [
            f"ID: {user.id}",
            f"Username: @{user.username}" if user.username else "",
            f"–ò–º—è: {user.first_name} {user.last_name or ''}".strip(),
            contact_info
        ]
        client_info = "\n".join(filter(None, client_info))
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await update.message.forward(ADMIN_TELEGRAM_ID)
        await context.bot.send_message(
            chat_id=ADMIN_TELEGRAM_ID,
            text=f"üì∑ –§–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{client_info}\n\n"
                 f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reply {user.id} <—Ç–µ–∫—Å—Ç>"
        )
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = ("‚úÖ –í–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. "
                    "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. "
                    "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏:")
        
        reply_keyboard = [[{"text": "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "request_contact": True}]]
        await update.message.reply_text(
            response,
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, 
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    try:
        phone = update.message.contact.phone_number
        user = update.message.from_user
        await context.bot.send_message(
            ADMIN_TELEGRAM_ID,
            f"üì± –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {user.first_name}:\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"User ID: {user.id}"
        )
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. "
            "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reply", reply))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
